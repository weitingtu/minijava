# Store the parser files generated by JavaCC
JAVACC_OUTDIR = myparser
JAVACC_FILE = minijava.jj
PARSER = $(JAVACC_OUTDIR)/MiniJavaParser.java

JAVAC_OPTIONS = -Xlint:unchecked

# AST and Visitor source files
AST = $(wildcard syntaxtree/*.java)
VISITOR = $(wildcard visitor/*.java)

# AST and Visitor class files
AST_CLASS = $(AST:.java=.class)
VISITOR_CLASS = $(VISITOR:.java=.class)



all: Main.class

mini:
	make clean;
	make;

Main.class: Main.java $(PARSER) 

pretty: Main2.class

Main2.class: Main2.java $(PARSER) 

%.class: %.java
	javac $(JAVAC_OPTIONS) $<

$(PARSER): $(JAVACC_FILE) 
	# Create the directory if it does not exist
	mkdir -p $(JAVACC_OUTDIR)
	javacc -OUTPUT_DIRECTORY="$(JAVACC_OUTDIR)" $(JAVACC_FILE)
	javac $(JAVAC_OPTIONS) $(JAVACC_OUTDIR)/*.java

clean:
	rm -rf $(JAVACC_OUTDIR) *.class
	rm -f syntaxtree/*.class visitor/*.class input/*.class
	rm -f *.rpt

test1:
	java Main < input/Factorial.java

test2:
	java Main < input/BinarySearch.java

test_task1:
	rm -f *.rpt;
	@for p in MyVisitor Visitor nti visit Start v_key ifound ; do \
        echo "Check $$p usage "; \
    	(java Main $$p < input/TreeVisitor.java > $$p.rpt ; diff $$p.rpt golden/$$p.rpt) && ( echo "Passed"; ) ; \
	done; \
    echo "Check Unknown identifier "; \
	(java Main task1 < input/UnknownIdentifier.java > UnknownIdentifier.rpt ; diff UnknownIdentifier.rpt golden/UnknownIdentifier.rpt) && ( echo "Passed"; ) ; \
    echo "Check Redeclaration of an identifier "; \
	(java Main task1 < input/Redeclaration.java > Redeclaration.rpt ; diff Redeclaration.rpt golden/Redeclaration.rpt) && ( echo "Passed"; ) ; \
    echo "Check identifier in different scope"; \
	(java Main task1 < input/IdDifferentScope.java > IdDifferentScope.rpt ; diff IdDifferentScope.rpt golden/IdDifferentScope.rpt) && ( echo "Passed"; ) ; 
	(java Main task1 < input/Foo1.java > Foo1.rpt ; diff Foo1.rpt golden/Foo1.rpt) && ( echo "Passed"; ) ; 
	(java Main task1 < input/MethodParamsVarsCheck.java > MethodParamsVarsCheck.rpt ; diff MethodParamsVarsCheck.rpt golden/MethodParamsVarsCheck.rpt) && ( echo "Passed"; ) ; 
	(java Main task1 < input/FunctionRedefined.java > FunctionRedefined.rpt ; diff FunctionRedefined.rpt golden/FunctionRedefined.rpt) && ( echo "Passed"; ) ; 
	java Main < input/Double.java && (echo "Passed"; )
	java Main < input/Foo.java && (echo "Passed"; )

test_task2:
	rm -f task2.rpt;
	java Main < input/LessThanIfBooleanInt.java || (echo "LessThanIfBooleanInt Catched" > task2.rpt; )
	java Main < input/LessThanIfDoubleInt.java && (echo "LessThanIfDoubleInt Passed" >> task2.rpt; )
	java Main < input/PlusIntDouble.java && (echo "PlusIntDouble Passed">> task2.rpt; )
	java Main < input/MinusIntDouble.java && (echo "MinusIntDouble Passed" >> task2.rpt; )
	java Main < input/TimesIntDouble.java && (echo "TimesIntDouble Passed" >> task2.rpt; )
	java Main < input/Array.java && (echo "Array Passed" >> task2.rpt; )
	java Main < input/AssignDoubleArrayBoolean.java || (echo "AssignDoubleArrayBoolean Catched" >> task2.rpt; )
	java Main < input/ArgumentNumberMismatch.java || (echo "ArgumentNumberMismatch Catched" >> task2.rpt; )
	java Main < input/ReturnTypeMismatch.java || (echo "ReturnTypeMismatch Catched" >> task2.rpt; )
	java Main < input/ClassMethodVarTypeChecking.java && (echo "ClassMethodVarTypeChecking Passed" >> task2.rpt; )
	java Main < input/Extend.java && (echo "Extend Passed" >> task2.rpt; )
	java Main < input/OverridingError.java || (echo "OverridingError Catched" >> task2.rpt; )
	java Main < input/OverloadingError.java || (echo "OverloadingError Catched" >> task2.rpt; )
	@cat task2.rpt;
	@diff task2.rpt golden/task2.rpt && ( echo "Passed"; );

pretty_test1:
	java Main2 < input/Factorial.java

pretty_test2:
	java Main2 < inputBinarySearch.java

