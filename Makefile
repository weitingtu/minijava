# Store the parser files generated by JavaCC
JAVACC_OUTDIR = myparser
JAVACC_FILE = minijava.jj
PARSER = $(JAVACC_OUTDIR)/MiniJavaParser.java

JAVAC_OPTIONS = -Xlint:unchecked

# AST and Visitor source files
AST = $(wildcard syntaxtree/*.java)
VISITOR = $(wildcard visitor/*.java)

# AST and Visitor class files
AST_CLASS = $(AST:.java=.class)
VISITOR_CLASS = $(VISITOR:.java=.class)



all: Main.class

mini:
	make clean;
	make;

Main.class: Main.java $(PARSER) 

pretty: Main2.class

Main2.class: Main2.java $(PARSER) 

%.class: %.java
	javac $(JAVAC_OPTIONS) $<

$(PARSER): $(JAVACC_FILE) 
	# Create the directory if it does not exist
	mkdir -p $(JAVACC_OUTDIR)
	javacc -OUTPUT_DIRECTORY="$(JAVACC_OUTDIR)" $(JAVACC_FILE)
	javac $(JAVAC_OPTIONS) $(JAVACC_OUTDIR)/*.java

clean:
	rm -rf $(JAVACC_OUTDIR) *.class
	rm -f syntaxtree/*.class visitor/*.class input/*.class
	rm -f *.rpt

test1:
	java Main < input/Factorial.java

test2:
	java Main < input/BinarySearch.java

test_task1:
	rm -f *.rpt;
	@for p in MyVisitor Visitor nti visit Start v_key ifound ; do \
        echo "Check $$p usage "; \
    	(java Main $$p < input/TreeVisitor.java > $$p.rpt ; diff $$p.rpt golden/$$p.rpt) && ( echo "Passed"; ) ; \
	done; 
	@for p in UnknownIdentifier Redeclaration IdDifferentScope Foo1 MethodParamsVarsCheck FunctionRedefined ExtendingUndefinedClass ; do \
	    (java Main task1 < input/$$p.java > $$p.rpt ; diff $$p.rpt golden/$$p.rpt) && ( echo "$$p Passed"; ) ; \
	done; 
	@for p in Double Foo ; do \
	    java Main < input/$$p.java && (echo "$$p Passed"; ) ; \
	done; 

test_task2:
	rm -f task2.rpt;
	@for p in LessThanIfDoubleInt PlusIntDouble MinusIntDouble TimesIntDouble Array ClassMethodVarTypeChecking Extend ; do \
	    (java Main < input/$$p.java && (echo "$$p Passed" >> task2.rpt; )) ; \
	done; 
	@for p in LessThanIfBooleanInt AssignDoubleArrayBoolean ArgumentNumberMismatch ReturnTypeMismatch OverridingError OverloadingError OverloadingMethodsIntDouble OverloadingMethodsIntBoolean ; do \
	    (java Main < input/$$p.java || (echo "$$p Catched" >> task2.rpt; )) ; \
	done; 
	@cat task2.rpt;
	@diff task2.rpt golden/task2.rpt && ( echo "Passed"; );

pretty_test1:
	java Main2 < input/Factorial.java

pretty_test2:
	java Main2 < inputBinarySearch.java

