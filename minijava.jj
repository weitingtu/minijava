options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
package myparser;
import syntaxtree.*;
public class MiniJavaParser {}
PARSER_END(MiniJavaParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < ASSIGN: "=" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < TIMES: "*" >
| < DIVISION: "/" >
| < AND : "&" >
| < OR : "|" >
| < NOT : "!" >   
| < BOOLEAN: "boolean" >   
| < CLASS: "class" >
| < INTERFACE: "interface" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < FOR: "for" >
| < INTEGER: "int" >   
| < DOUBLE: "double" >
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < VOID: "void" >         
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* LITERALS */
{
  < DOUBLE_LITERAL: ( ["1"-"9"] (["0"-"9"])* "." (["0"-"9"])+ | "0." (["0"-"9"])+ ) >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/


Program Goal() :
{ MainClass m; 
  ClassDeclList cl = new ClassDeclList();
  ClassDecl c;
}
{
  m=MainClass() 
  ( c=ClassDeclaration() { cl.addElement(c); } )*
  <EOF>
  { return new Program(m,cl); }
}

MainClass MainClass() :
{ Identifier i1,i2;
  Statement s; }
{
  "class" i1=Identifier() "{"
    "public" "static" "void" "main" "(" "String" "[" "]" i2=Identifier() ")"   
    "{" s=Statement() "}"
  "}"
  { return new MainClass(i1,i2,s); }
}

ClassDecl ClassDeclaration() :  
{ ClassDecl c; }
{
  ( 
  LOOKAHEAD(3)
  c=ClassDeclarationSimple()
|
  c=ClassDeclarationExtends()
  )
  { return c; }
}

ClassDecl ClassDeclarationSimple() :
{ Identifier i;
  VarDecl v;
  VarDeclList vl = new VarDeclList();
  MethodDecl m;
  MethodDeclList ml = new MethodDeclList();
}
{
  "class" i=Identifier() "{" ( v=VarDeclaration()    { vl.addElement(v); } )* 
                             ( m=MethodDeclaration() { ml.addElement(m); } )* 
                       "}"
  { return new ClassDeclSimple(i,vl,ml); }
}

ClassDecl ClassDeclarationExtends() :
{ Identifier i1,i2;
  VarDecl v;
  VarDeclList vl = new VarDeclList();
  MethodDecl m;
  MethodDeclList ml = new MethodDeclList();
}
{
  "class" i1=Identifier() "extends" i2=Identifier()
                       "{"   ( v=VarDeclaration()    { vl.addElement(v); } )* 
                             ( m=MethodDeclaration() { ml.addElement(m); } )* 
                       "}"
  { return new ClassDeclExtends(i1,i2,vl,ml); }
}

VarDecl VarDeclaration() :  
{ Type t;
  Identifier i;
}
{ 
  t=Type() i=Identifier() ";"      
  { return new VarDecl(t,i); }
}

MethodDecl MethodDeclaration() :  
{ 
  Type t= null;
  Identifier i = null;
  FormalList fl = new FormalList();
  VarDecl v;
  VarDeclList vl = new VarDeclList();
  Statement s;
  StatementList sl = new StatementList();
  Exp e = null; 
}
{
  "public" t=Type() i=Identifier() 
  "(" 
  try {
  ( fl=FormalParameterList() )? 
  ")"   
  }
  catch (ParseException exception) 
  {
      Token token = getToken(0);
      System.out.println("invalid formal parameter list"); 
      System.out.println(" at line " + token.beginLine + ", column " + token.beginColumn); 
      do
      {
          token = getNextToken();
      } while(token.kind != RPAREN);
  }
  "{" ( LOOKAHEAD(2) v=VarDeclaration() { vl.addElement(v); } )* 
      ( s=Statement() { sl.addElement(s); } )* "return" e=Expression() ";" "}"
  { return new MethodDecl(t,i,fl,vl,sl,e); }
}

FormalList FormalParameterList() :
{ FormalList fl = new FormalList(); 
  Formal f;
  Type t;
  Identifier i;
}
{
  f=FormalParameter() { fl.addElement(f); }
  (
    ( "," 
      ( 
        LOOKAHEAD(2) 
        f=FormalParameter() {fl.addElement(f);}
      | 
        LOOKAHEAD(1) 
        i=Identifier() 
        {
          System.out.println("identifier expected"); 
          Token token = getToken(0); 
          System.out.println(" at line " + token.beginLine + ", column " + token.beginColumn); 
          f = new Formal(f.t, i); 
          fl.addElement(f);
        }
      | 
        LOOKAHEAD(1) 
        t=Type() 
        { 
          System.out.println("identifier expected"); 
          token = getToken(0); 
          System.out.println(" at line " + token.beginLine + ", column " + token.beginColumn); 
          fl.addElement(f);
        }
      )
    )
  |
    (
      f=FormalParameter() 
      { 
        System.out.println(", expected"); 
        Token token = getToken(0); 
        System.out.println(" at line " + token.beginLine + ", column " + token.beginColumn); 
        fl.addElement(f); 
      }
    )
  )*
  { return fl; }
}

Formal FormalParameter() :
{ Type t; 
  Identifier i;
}
{  
  t=Type() i=Identifier()
  { return new Formal(t,i); }
}

Formal FormalParameterRest() :
{ Formal f; }
{
 
 (
  LOOKAHEAD(3)
  "," f=FormalParameter()  { System.out.println("aaa"); }
| 
  LOOKAHEAD(2)
   f=FormalParameter() { System.out.println(", expected"); Token token = getToken(0); System.out.println(" at line " + token.beginLine + ", column " + token.beginColumn); }
  )
  { return f; }
}

Type Type() :
{ Type t; }
{
  (
  LOOKAHEAD(3)
  t=ArrayType()
|
  LOOKAHEAD(3)
  t=DoubleArrayType()
|
  t=BooleanType()
|
  t=IntegerType()
|
  t=DoubleType()
|
  t=IdentifierType()     
  )
  { return t; }
}

Type ArrayType() :
{}
{
  "int" "[" "]"
  { return new IntArrayType(); }
}

Type DoubleArrayType() :
{}
{
  "double" "[" "]"
  { return new DoubleArrayType(); }
}

Type BooleanType() :
{}
{
  "boolean"
  { return new BooleanType(); }
}

Type IntegerType() :
{}
{
  "int"
  { return new IntegerType(); }
}

Type DoubleType() :
{}
{
  "double"
  { return new DoubleType(); }
}

Type IdentifierType() :
{ Token t; }
{
  t=<IDENTIFIER>
  { return new IdentifierType(t.image); }
}

Statement Statement() :
{ Statement s; }
{
  (
  s=Block()
| 
  LOOKAHEAD(2)
  s=AssignmentStatement()
|
  LOOKAHEAD(2)
  s=ArrayAssignmentStatement()
|
  s=IfStatement()
|
  s=WhileStatement()
|
  s=ForStatement()
|
  s=PrintStatement()
  )
  { return s; }
}

Statement Block() :
{ 
  Statement s;
  StatementList sl = new StatementList(); 
}
{
  "{" ( s=Statement() { sl.addElement(s); } )* "}"
  { return new Block(sl); }
}

Statement AssignmentStatement() :
{ Identifier i;
  Exp e; 
}
{
  i=Identifier() "=" e=Expression() ";"
  { return new Assign(i,e); }
}

Statement ArrayAssignmentStatement() :
{ Identifier i;
  Exp e1,e2;
}
{
  i=Identifier() "[" e1=Expression() "]" "=" e2=Expression() ";"
  { return new ArrayAssign(i,e1,e2); }
}

Statement IfStatement() :
{ Exp e;
  Statement s1,s2;
}
{
  "if" "(" e=Expression() ")" s1=Statement() "else" s2=Statement() 
  { return new If(e,s1,s2); }
}

Statement WhileStatement() :
{ Exp e;
  Statement s;
}
{
  "while" "(" e=Expression() ")" s=Statement() 
  { return new While(e,s); }
}

Statement ForStatement() :
{ ForInit fi;
  Exp e;
  StmtExprList sel = new StmtExprList(); ;
  Statement s;
}
{
  "for" "(" fi = ForInit() ";" e = Expression() ";" sel = StmtExprList() ")" s=Statement() 
  { return new For(fi,e,sel,s); }
}

ForInit ForInit() :
{ ForInit fi; }
{
  (  
  LOOKAHEAD(2)
  fi=LocalVarDeclaration()
| fi=StmtExprList()  )
  { return fi; }
}

ForInit LocalVarDeclaration() :
{ Type t;
  AssignExpr a;
  AssignExprList al = new AssignExprList();
}
{
  t = Type() a = AssignExpr() { al.addElement(a); }
  ("," a = AssignExpr() { al.addElement(a); } )*
  { return new LocalVarDeclaration(t,al); }
}

StmtExprList StmtExprList() :
{ StmtExprList sel = new StmtExprList();
  StmtExpr se;
}
{
  se = StmtExpr() { sel.addElement(se); }
  ("," se = StmtExpr() { sel.addElement(se); })*
  { return sel; }
}

StmtExpr StmtExpr() :
{ StmtExpr se; }
{
  (  
  LOOKAHEAD(2)
  se = AssignExpr()
| se = ArrayAssignExpr()
  )
  { return se; }
}

AssignExpr AssignExpr() :
{ Identifier i;
  Exp e;
}
{
  i = Identifier() "=" e = Expression()
  { return new AssignExpr(i,e); }
}

ArrayAssignExpr ArrayAssignExpr() :
{ Identifier i;
  Exp idx;
  Exp e;
}
{
  i = Identifier() "[" idx = Expression() "]" "=" e = Expression()
  { return new ArrayAssignExpr(i,idx,e); }
}

Statement PrintStatement() :
{ Exp e; }
{
  "System.out.println" "(" e=Expression() ")" ";"
  { return new Print(e); }
}

Exp Expression() :
{ Exp e1; }
{
  e1=ConditionalOrExpression()
  { return e1; }
}

Exp ConditionalOrExpression() :
{ Exp e1, e2; }
{
  e1=ConditionalAndExpression() 
  ( 
    LOOKAHEAD("||" ConditionalAndExpression()) 
    "||" e2=ConditionalAndExpression() { e1 = new Or(e1, e2); } 
  )*
  { return e1; }
}

Exp ConditionalAndExpression() :
{ Exp e1, e2; }
{
  e1=RelationalExpression() 
  ( 
    LOOKAHEAD("&&" RelationalExpression()) 
    "&&" e2=RelationalExpression() { e1 = new And(e1, e2); } 
  )*
  { return e1; }
}

Exp RelationalExpression() :
{ Exp e1, e2; }
{
  e1=AdditiveExpression() 
  ( 
    LOOKAHEAD("<" RelationalExpression()) 
    "<" e2=RelationalExpression() { e1 = new LessThan(e1, e2); } 
  )*
  { return e1; }
}

Exp AdditiveExpression() :
{ Exp e1, e2; Token t;}
{
  e1=MultiplicativeExpression() 
  (
  ( 
    LOOKAHEAD(( "+" | "-" ) MultiplicativeExpression()) 
    ( t="+" | t="-" ) e2=MultiplicativeExpression() 
    { 
        if( t.kind == PLUS )
        {
          e1 = new Plus(e1, e2); 
        }
        else
        {
          e1 = new Minus(e1, e2); 
        }
    } 
  )*
  )
  { return e1; }
}

Exp MultiplicativeExpression() :
{ Exp e1, e2; Token t;}
{
  e1=ExponentialExpression() 
  (
  ( 
    LOOKAHEAD(( "*" | "/" ) ExponentialExpression()) 
    ( t="*" | t="/" ) e2=ExponentialExpression() 
    { 
        if( t.kind == TIMES )
        {
          e1 = new Times(e1, e2); 
        }
        else
        {
          e1 = new Divide(e1, e2); 
        }
    } 
  )*
  )
  { return e1; }
}

Exp ExponentialExpression() :
{ Exp e1, e2; }
{
  e1=UnaryExpression() 
  ( 
    LOOKAHEAD("^^" ExponentialExpression()) 
    "^^" e2=ExponentialExpression() { e1 = new Power(e1, e2); } 
  )*
  { return e1; }
}

Exp UnaryExpression() :
{ Exp e ; Token t;}
{
  (
    ( "-" ) e=UnaryExpression() { e = new UnaryMinus(e);} 
  |
    e=UnaryExpressionNotPlusMinus()
  )
  { return e; }
}

Exp UnaryExpressionNotPlusMinus() :
{ Exp e ; Token t;}
{
  (
    ( "!" ) e=UnaryExpression() { e = new Not(e);} 
  |
    e=PrimarySuffix()
  )
  { return e; }
}

Exp PrimarySuffix() :
{ Exp e; }
{ 
  (
  LOOKAHEAD( PrimaryExpression() "[" )
  e=ArrayLookup()
|
  LOOKAHEAD( PrimaryExpression() "." "length" )
  e=ArrayLength()
|
  LOOKAHEAD( PrimaryExpression() "." Identifier() "(" )
  e=MessageSend()
|
  e=PrimaryExpression()
  )
  { return e; }
}

Exp Expression2() :
{ Exp e; }
{
  (
  LOOKAHEAD( PrimaryExpression() "&&" )
  e=AndExpression()
|
  LOOKAHEAD( PrimaryExpression() "||" )
  e=OrExpression()
|
  LOOKAHEAD( PrimaryExpression() "<" )
  e=CompareExpression()
|
  LOOKAHEAD( PrimaryExpression() "+" )
  e=PlusExpression()
|
  LOOKAHEAD( PrimaryExpression() "-" )
  e=MinusExpression()
|
  LOOKAHEAD( PrimaryExpression() "*" )
  e=TimesExpression()
|
  LOOKAHEAD( PrimaryExpression() "/" )
  e=DivideExpression()
|
  LOOKAHEAD( PrimaryExpression() "^^" )
  e=PowerExpression()
|
  LOOKAHEAD( PrimaryExpression() "[" )
  e=ArrayLookup()
|
  LOOKAHEAD( PrimaryExpression() "." "length" )
  e=ArrayLength()
|
  LOOKAHEAD( PrimaryExpression() "." Identifier() "(" )
  e=MessageSend()
| 
  e=PrimaryExpression()
  )
  { return e; }
}

Exp AndExpression() :
{ Exp e1,e2; } 
{
  e1=PrimaryExpression() "&&" e2=PrimaryExpression()
  { return new And(e1,e2); }
}

Exp OrExpression() :
{ Exp e1,e2; } 
{
  e1=PrimaryExpression() "||" e2=PrimaryExpression()
  { return new Or(e1,e2); }
}

Exp CompareExpression() :
{ Exp e1,e2; } 
{
  e1=PrimaryExpression() "<" e2=PrimaryExpression()
  { return new LessThan(e1,e2); }
}

Exp PlusExpression() :
{ Exp e1,e2; } 
{
  e1=PrimaryExpression() "+" e2=PrimaryExpression()
  { return new Plus(e1,e2); }
}

Exp MinusExpression() :
{ Exp e1,e2; } 
{
  e1=PrimaryExpression() "-" e2=PrimaryExpression()
  { return new Minus(e1,e2); }
}

Exp TimesExpression() :
{ Exp e1,e2; } 
{
  e1=PrimaryExpression() "*" e2=PrimaryExpression()
  { return new Times(e1,e2); }
}

Exp DivideExpression() :
{ Exp e1,e2; } 
{
  e1=PrimaryExpression() "/" e2=PrimaryExpression()
  { return new Divide(e1,e2); }
}

Exp PowerExpression() :
{ Exp e1,e2; } 
{
  e1=PrimaryExpression() "^^" e2=PrimaryExpression()
  { return new Power(e1,e2); }
}

Exp ArrayLookup() :
{ Exp e1,e2; } 
{
  e1=PrimaryExpression() "[" e2=Expression() "]"
  { return new ArrayLookup(e1,e2); }
}

Exp ArrayLength() :
{ Exp e; }
{
  e=PrimaryExpression() "." "length"
  { return new ArrayLength(e); }
}

Exp MessageSend() :
{ Exp e;
  Identifier i;
  ExpList el = new ExpList(); 
}
{
  e=PrimaryExpression() "." i=Identifier() 
  "(" ( el=ExpressionList() )? ")"
  { return new Call(e,i,el); }
}

ExpList ExpressionList() :
{ Exp e1,e2;
  ExpList el = new ExpList();
}
{
  e1=Expression() 
  { el.addElement(e1); }
  ( e2=ExpressionRest() { el.addElement(e2); })*
  { return el; }
}

Exp ExpressionRest() :
{ Exp e; }
{
  "," e=Expression()
  { return e; }
}

Exp PrimaryExpression() :
{ Exp e; }
{ 
  (
  e=IntegerLiteral()
|
 e=DoubleLiteral()
|
  e=TrueLiteral()
|
  e=FalseLiteral()
|
  e=IdentifierExp()
|
  e=ThisExpression()
|
  LOOKAHEAD(3)
  e=ArrayAllocationExpression()
|
  LOOKAHEAD(3)
  e=DoubleArrayAllocationExpression()
|
  e=AllocationExpression()
/*|   
  e=NotExpression()
|   
  e=UnaryMinusExpression()*/
|   
  e=BracketExpression()
  )
  { return e; }
}

Exp IntegerLiteral() :
{ Token t; }
{
  t=<INTEGER_LITERAL>
  { return new IntegerLiteral(Integer.parseInt(t.image)); }
}

Exp DoubleLiteral() :
{ Token t; }
{
  t=<DOUBLE_LITERAL>
  { return new DoubleLiteral(Double.parseDouble(t.image)); }
}

Exp TrueLiteral() :
{}
{
  "true"
  { return new True(); }
}

Exp FalseLiteral() :
{}
{
  "false"
  { return new False(); }
}

Exp IdentifierExp() :
{ Token t; }
{
  t=<IDENTIFIER>
  { return new IdentifierExp(t.image, t.beginLine, t.beginColumn, t.endLine, t.endColumn); }
}

Exp ThisExpression() :
{}
{
  "this"
  { return new This(); }
}

Exp ArrayAllocationExpression() :
{ Exp e; }
{
  "new" "int" "[" e=Expression() "]"
  { return new NewArray(e); }
}

Exp DoubleArrayAllocationExpression() :
{ Exp e; }
{
  "new" "double" "[" e=Expression() "]"
  { return new NewDoubleArray(e); }
}

Exp AllocationExpression() :
{ Identifier i; }
{
  "new" i=Identifier() "(" ")"
  { return new NewObject(i); }
}

Exp NotExpression() :
{ Exp e; }
{
  "!" e=Expression() 
  { return new Not(e); }
}

Exp UnaryMinusExpression() :
{ Exp e; } 
{
  "-" e=Expression()
  { return new UnaryMinus(e); }
}

Exp BracketExpression() :
{ Exp e; }
{
  "(" e=Expression() ")"
  { return e; }
}

Identifier Identifier() :
{ Token t; }
{
  t=<IDENTIFIER>
  { return new Identifier(t.image, t.beginLine, t.beginColumn, t.endLine, t.endColumn); }
}
